n=87
qchisq(0.95,n-5)
qchisq(0.95,9)
68.373-60.116
halfnorm(deviance_res,ylab='pearson res')
halfnorm(deviance_res,ylab='deviance res')
halfnorm(pearson_res,ylab='pearson res')
library(readxl)
data=read_excel("D:\\STA207\\project\\survival_sparrow.xlsx")
print(colnames(data))
library(readxl)
data=read_excel("D:\\STA207\\project\\survival_sparrow.xlsx")
data$AG=factor(data$AG)
print(colnames(data))
data$STATUS[data$STATUS=='Survived']=1
data$STATUS[data$STATUS=='Perished']=0
data$STATUS=as.numeric(data$STATUS)
num_x=data[,-c(1,2)]
#scale
num_x_s=scale(num_x)
data[,-c(1,2)]=num_x_s
num_data=data[,-2]
pairs(num_data)
cor(num_data)
m1=glm(formula=STATUS~.,family=binomial,data=data)
ANOVA(m1)
anva(m1)
anova(m1)
m2=glm(formula=STATUS ~ TL + WT + HL + KL,family=binomial,data=data)
summary(m2)
d<-read.table('D:\\STA 243\\hw2\\hw2data.txt')
View(d)
d<-d[,2:16]
r<-sample(1:15,15)
r
#Calculate the length
L<-0
for(i in 1:14){
L<-L+d[r[i],r[i+1]]
}
d
L<-L+d[r[15],r[1]]
sample(1:15,2)
r
d<-read.table('D:\\STA 243\\hw2\\hw2data.txt')
d<-d[,2:16]
r<-sample(1:15,15)
#Calculate the length
L<-0
for(i in 1:14){
L<-L+d[r[i],r[i+1]]
}
L<-L+d[r[15],r[1]]
tau1<-400
tau<-tau1
print(L)
for(l in 1:10000){
tau<-0.999*tau
if(l%%100==0){
print(L)
}
0
===}
r
s<-sample(1:15,2)
s
rnext<-r
t<-rnext[s[1]]
t
rnext[s[1]]
rnext[s[2]]
rnext[s[1]]<-rnext[s[2]]
rnext
rnext[s[2]]<-t
rnext
Lnext<-0
for(i in 1:14){
Lnext<-Lnext+d[rnext[i],rnext[i+1]]
}
Lnext
tau1<-400
tau1<-400
Lmin<-100
source('D:/STA 243/hw2/hw2-3(2).R', echo=TRUE)
source('D:/STA 243/hw2/hw2-3(2).R', echo=TRUE)
source('D:/STA 243/hw2/hw2-3(2).R', echo=TRUE)
source('D:/STA 243/hw2/hw2-3(2).R', echo=TRUE)
tau1<-300
source('D:/STA 243/hw2/hw2-3(2).R', echo=TRUE)
source('D:/STA 243/hw2/hw2-3(2).R', echo=TRUE)
source('D:/STA 243/hw2/hw2-3(2).R', echo=TRUE)
tau1<-400
source('D:/STA 243/hw2/hw2-3(2).R', echo=TRUE)
source('D:/STA 243/hw2/hw2-3(2).R', echo=TRUE)
source('D:/STA 243/hw2/hw2-3(2).R', echo=TRUE)
source('D:/STA 243/hw2/hw2.R', echo=TRUE)
source('D:/STA 243/hw2/hw2-2.R', echo=TRUE)
S<-300 #Number of total chromosomes.
N<-length(x)
x
x<-(0:(n-1))/n
truefunction<-function(x){
t <- c(0.1, 0.13, 0.15, 0.23, 0.25, 0.4, 0.44, 0.65, 0.76, 0.78, 0.81)
h <- c(4, -5, 3, -4, 5, -4.2, 2.1, 4.3, -3.1, 2.1, -4.2)
temp <- 0
for(i in 1:11) {
temp <- temp + h[i]/2 * (1 + sign(x - t[i]))
}
return(temp)
}
n<-512
(0:(n-1))/n
N<-length(x)
x<-(0:(n-1))/n  #0-1 all#=512
N<-length(x)
chr<-matrix(0,nrow=S,ncol=N-1) #S chromosomes.
S<-300 #Number of total chromosomes.
chr<-matrix(0,nrow=S,ncol=N-1) #S chromosomes.
View(chr)
val<-numeric(S) #The value of S chromosomes.
val
S
numeric(10)
for(i in 1:S){
chr[i,]<-sample(0:1,N-1,replace=T)
}
View(chr)
i=1
partition<-which(chr[i,]==1,arr.ind=T)
partition
chr[1,]
numeric(N)
partition[1]
rnorm(f)
truefunction<-function(x){
t <- c(0.1, 0.13, 0.15, 0.23, 0.25, 0.4, 0.44, 0.65, 0.76, 0.78, 0.81)
h <- c(4, -5, 3, -4, 5, -4.2, 2.1, 4.3, -3.1, 2.1, -4.2)
temp <- 0
for(i in 1:11) {
temp <- temp + h[i]/2 * (1 + sign(x - t[i]))
}
return(temp)
}
n<-512
x<-(0:(n-1))/n  #0-1 all#=512
f<-truefunction(x)
set.seed(0401)
f
rnorm(f)
rnorm(f)/3
lines(x,f)
plot(x,y)
source('D:/STA 243/hw2/hw2.R', echo=TRUE)
mean(f[1:partition[1]])
partition[1]
i=1
j=1
partition[j]
partition
partition[j]+1
partition[j+1]
y
f
B+
1
B=length(partition)
L<-numeric(B+1)
B+1
L<-numeric(B+1)
L[1]<-partition[1]
L[B+1]<-N-partition[B]
L
N
partition[B]
partitio
partition
partition[B]
L
for(j in 1:(B-1)){
L[j+1]<-partition[j+1]-partition[j]
}
L
a=125
a=42
a/15
x=21
y=4
z=8
c='A'
d='H'
x+y>=z
y==x-2*z-1
6*x != x
c>d
x=y==4
x
x=21
(x=y)==4
(x=1)==1
2*c>d
x=11
y=6
z=1
c='k'
d='y'
x==5 || y!=3
!(x>14)
!(x>9 && y !=23)
x <=1 && y==6 || z>4
c>='a'
c>='a' && c <='z'
c>='A' || c <='Z'
c != d && c != '\n'
x>=y>=z
x >= y >= z
x >= y
y >= z
x >= z
5 && y !=8 ||0
0.5……10
0.5^10
(0.5^10)3
(0.5^10)*3
(0.5^10)*56
choose(4,4)
choose(4,2)
choose(5,2)
choose(10,6)+choose(10,7)+choose(10,8)+10+1
(0.5^10)*386
2^10
choose(10,2)
install.packages("JuliaCal")
install.packages("JuliaCall")
julia_call("JWAS")
library(JuliaCall)
julia_call("sqrt",2)
julia_install_package("JWAS")
julia_do.call("sqrt", list(2))
julia_call("sqrt",2)
library(JuliaCall)
julia_install_package("Optim")
R.home(component = "home")
library(JuliaCall)
julia_call("sqrt",2)
julia_help("sqrt")
installed.packages()
help(JuliaCall)
julia <- julia_setup()
julia <- julia_setup(JULIA_HOME = “C:\Users\ztjsw\AppData\Local\Julia-0.7.0\bin”)
julia <- julia_setup(JULIA_HOME = "C:\Users\ztjsw\AppData\Local\Julia-0.7.0\bin")
julia <- julia_setup(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin")
getwd()
rcmdcheck::rcmdcheck()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
install.packages("JuliaCall")
library(JuliaCall)
julia <- julia_setup()
library(MASS)
installed.packages()
library(JuliaCall)
library(Rcpp)
install.packages("ggplot2")
library(JuliaCall)
julia <- julia_setup()
julia <- julia_setup(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin")
library(jjplot2)
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
library(jjplot2)
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
library(ggplot2)
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
# Scatterplot of mpg vs. hp for each combination of gears and cylinders
# in each facet, transmittion type is represented by shape and color
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
# Separate regressions of mpg on weight for each number of cylinders
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl,
main="Regression of MPG on Weight",
xlab="Weight", ylab="Miles per Gallon")
# Boxplots of mpg by number of gears
# observations (points) are overlayed and jittered
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
julia <- julia_setup(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin")
julia_help("sqrt")
library(JuliaCall)
julia <- julia_setup(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin")
julia <- julia_setup(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0")
julia <- julia_setup(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\")
julia <- julia_setup(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin")
julia <- julia_setup(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\julia.exe")
julia <- julia_setup(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin")
installed.packages()
options(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin")
julia_help("sqrt")
library(JuliaCall)
options(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin")
julia_call("sqrt",2)
install.packages(c("fansi", "stringi"))
library(JuliaCall)
julia <- julia_setup(JULIA_HOME = "C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin")
julia <- julia_setup(JULIA_HOME = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin")
julia <- julia_setup(JULIA_HOME = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin")
install.packages("XRJulia")
RShowDoc("Chapter_XRJulia", package = "XRJulia")
library(XRJulia)
RShowDoc("Chapter_XRJulia", package = "XRJulia")
findJulia(test = TRUE)
regjl <- juliaEval("
function reg(x,y)
n=size(x,1)
xreg=hcat(ones(size(x)[1],1),x)
k=size(xreg,2)
p1=((xreg'xreg)^(-1))
b=p1*xreg'y
r=y-xreg*b
sig=(r'r)/(n-k)
vmat=sig[1]*p1
sigb=sqrt(diag(vmat))
t=b./sigb
return (b,t)
end
")
# = Tell R regjl is a function = #
regjl_function=JuliaFunction(regjl)
library(JuliaCall)
julia <- julia_setup(JULIA_HOME = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin")
findJulia(test = TRUE)
findJulia()
findJulia(test = TRUE)
juliaEval("
function fcn(x)
if (x >= 0)
return sqrt(2*pi)*x^2
else
return 0
end
end
")
juliaUsing("Distributions")
juliaEval("
function mcmc_integrate(N::Int64, fcn::Function)
x = rand(Normal(0, 1), N)
fx = Array{Float64}(N)
for r = 1:length(fx)
fx[r] = fcn(x[r])
end
return mean(fx)
end
")
Ival_jl <- juliaGet(juliaEval("mcmc_integrate(100000, fcn)"))
Ival_jl
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
install.packages("JuliaCall")
library(JuliaCall)
julia <- julia_setup()
devtools::install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
julia <- julia_setup()
remove.packages("JuliaCall")
library(JuliaCall)
remove.packages("JuliaCall")
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
install.packages("JuliaCall")
install.packages("JuliaCall")
library(JuliaCall)
julia <- julia_setup()
evtools::install_github("Non-Contradiction/JuliaCall")
install.packages("evtools")
evtools::install_github("Non-Contradiction/JuliaCall")
evtools::install_github("Non-Contradiction/JuliaCall")
install.packages("devtools")
library(devtools)
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
install_github("Non-Contradiction/JuliaCall")
install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
library(devtools)
install_github("Non-Contradiction/JuliaCall")
devtools::install_github("Non-Contradiction/JuliaCall")
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools()
library(devtools)
install_github("Non-Contradiction/JuliaCall")
library(devtools)
install_github("Non-Contradiction/JuliaCall")
library(devtools)
install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
julia <- julia_setup()
devtools::install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
julia <- julia_setup()
installed.packages()
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
library(JuliaCall)
library(devtools)
install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
julia <- julia_setup()
devtools::install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
julia <- julia_setup()
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
remove.packages("RCall")
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
## Do initial setup
julia <- julia_setup()
library(JuliaCall)
## Do initial setup
julia <- julia_setup()
julia_installed_package("JWAS")
julia_library("JWAS")
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
library(devtools)
install_github("Non-Contradiction/JuliaCall")
devtools::check()
library(JuliaCall)
s
## Do initial setup
julia <- julia_setup()
JWASr::runShiny()
getwd()
setwd("D://JWASr")
library("shinyu")
library("shiny")
setwd("D://JWASr//inst//shiny-examples")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
runApp("myapp")
