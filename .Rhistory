G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
remove.packages("JWASr")
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
devtools::load_all()
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all()
devtools::document()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-1.0.1/bin/libjulia.dll"
jwasr_setup_win(path_libjulia)
phenotypes = phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt" #please change to your local path
pedigree = get_pedigree(ped_path, separator = ',', header = TRUE)
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = build_model(model_equation,R)
set_covariate(model, "x1")
G1 = 1.0
set_random(model, "x2", G1)
G2 = diag(2)
set_random_ped(model, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model, geno_path, G3, separator=',', header = TRUE)
outputMCMCsamples(model, "x2")
out = runMCMC(model, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
JWASr::runShiny()
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
shinyApp(server=server,ui=ui)
library(shiny)
ui = fluidPage(
)
server = function(input, output){}
shinyApp(server=server,ui=ui)
runApp('inst/shiny-examples/myapp/try.R')
