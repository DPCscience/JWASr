julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
remove.packages("RCall")
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
## Do initial setup
julia <- julia_setup()
library(JuliaCall)
## Do initial setup
julia <- julia_setup()
julia_installed_package("JWAS")
julia_library("JWAS")
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
library(devtools)
install_github("Non-Contradiction/JuliaCall")
devtools::check()
library(JuliaCall)
s
## Do initial setup
julia <- julia_setup()
library(devtools)
install_github("zhaotianjing/rJWAS")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
model_equation = "y1 = intercept + x1"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
# equation
model_equation = "y1 = intercept + x1"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
a=1
devtools::load_all()
getwd()
setwd("D:/")
devtools::load_all()
setwd("D:/myfirstpackage")
devtools::load_all()
library("myfirstpackage")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
# equation
model_equation = "y1 = intercept + x1"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
devtools::load_all()
library("myfirstpackage")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
# equation
model_equation = "y1 = intercept + x1"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
devtools::load_all()
library("myfirstpackage")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
# equation
model_equation = "y1 = intercept + x1"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
function a(){
j = 1
return(j)
}
a = function(){
j = 1
return(j)
}
b = function(){
print(j)
}
b()
a = function(){
j = 1
return(j)
}
b = function(){
print(j)
}
b()
a = function(){
jj = 1
}
b = function(){
print(jj)
}
b()
a = function(){
jj = 1
return(jj)
}
b = function(){
print(jj)
}
b()
a = function(){
jj <<- 1
return(jj)
}
b = function(){
print(jj)
}
b()
a = function(){
jj <<- 1
}
b = function(){
print(jj)
}
b()
a = function(){
assign(jj, 1, envir = .GlobalEnv)
# jj <<- 1
}
b = function(){
print(jj)
}
b()
a = function(){
assign("jj", 1, envir = .GlobalEnv)
# jj <<- 1
}
b = function(){
print(jj)
}
b()
a = function(){
assign("jj", "1", envir = .GlobalEnv)
# jj <<- 1
}
b = function(){
print(jj)
}
b()
a = function(){
assign("jj", "1", envir = .GlobalEnv)
# jj <<- 1
}
b = function(){
print("jj")
}
b()
b = function(){
cc= 1
print(cc)
}
b()
a = function(){
# assign("jj", "1", envir = .GlobalEnv)
jj <<- 1
return(jj)
}
b = function(){
print(jj)
}
b()
a <- function(){
# assign("jj", "1", envir = .GlobalEnv)
jj <<- 1
}
jj
devtools::load_all()
library("myfirstpackage")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
# equation
model_equation = "y1 = intercept + x1"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
myfirstpackage::runMCMC(model, phenotypes)
library(devtools)
install_github("zhaotianjing/rJWAS")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
library(devtools)
install_github("zhaotianjing/rJWAS")
library(devtools)
install_github("zhaotianjing/rJWAS")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
model_equation = "y1 = intercept + x1"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
myfirstpackage::runMCMC(model, phenotypes)
myfirstpackage$phenotypes
myfirstpackage::phenotypes
phenotypes = myfirstpackage::phenotypes
devtools::load_all()
library("myfirstpackage")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
eye(2)
devtools::load_all()
library("myfirstpackage")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
phenotypes = myfirstpackage::phenotypes
myfirstpackage::set_covariate(model,"x1")
devtools::load_all()
library("myfirstpackage")
eye(2)
diag(2)
myfirstpackage::assign(G1,1.0)
myfirstpackage::assign(G2,eye(2))
myfirstpackage::assign(G2,diag(2))
devtools::load_all()
library("myfirstpackage")
myfirstpackage::set_random(model,"x2",G1)
devtools::load_all()
library("myfirstpackage")
myfirstpackage::set_random(model,"x2",G1)
myfirstpackage::assign(G1,1.0)
myfirstpackage::assign(G2,diag(2))
myfirstpackage::set_random(model,"x2",G1)
myfirstpackage::set_random(model,"x2","G1")
devtools::load_all()
library("myfirstpackage")
myfirstpackage::ran_julia("set_random(model,x2,G1)")
myfirstpackage::assign(x1,"x1")
myfirstpackage::ran_julia("set_covariate(model1,x1);")
myfirstpackage::ran_julia("set_covariate(model,x1);")
myfirstpackage::assign(x1,"x1")
myfirstpackage::ran_julia("set_covariate(model,x1);")
devtools::load_all()
library("myfirstpackage")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
phenotypes = myfirstpackage::phenotypes
myfirstpackage::assign(x1,"x1")
myfirstpackage::ran_julia("set_covariate(model,x1);")
myfirstpackage::ran_julia("set_covariate(model,'x1');")
myfirstpackage::ran_julia("set_covariate(model,"x1");")
devtools::load_all()
library("myfirstpackage")
myfirstpackage::assign(x1,"x1")
JuliaCall::julia_assign(x1, "x1")
JuliaCall::julia_assign(x1, "10")
JuliaCall::julia_assign("x1", "10")
devtools::load_all()
library("myfirstpackage")
myfirstpackage::assign(x1,"x1")
myfirstpackage::ran_julia("set_covariate(model,x1);")
myfirstpackage::assign(G1,1.0)
myfirstpackage::assign(G2,diag(2))
myfirstpackage::assign(x2,"x2")
myfirstpackage::ran_julia("set_random(model,x2,G1)")
myfirstpackage::assign(x2,"x2")
myfirstpackage::ran_julia("set_random(model,x2,G1)")
JuliaCall::julia_command("set_random(model,x2,G1);")
JuliaCall::julia_assign(x2, "x2")
JuliaCall::julia_assign("x2", "x2")
JuliaCall::julia_command("set_random(model,x2,G1);")
myfirstpackage::assign(G1,1.0)
myfirstpackage::assign(G1,1.0)
JuliaCall::julia_eval("G1")
JuliaCall::julia_eval(G1)
myfirstpackage::assign("G1",1.0)
JuliaCall::julia_eval(G1)
JuliaCall::julia_eval("G1")
myfirstpackage::assign("G1",1.0)
JuliaCall::julia_eval("G1")
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
## Do initial setup
julia <- julia_setup()
#check version
julia_installed_package("JWAS")
#using Pkg
julia_library("JWAS")
julia_library("CSV")
file_path = "D:\\julialearn\\phenotypes.txt"
JuliaCall::julia_assign("file_path", file_path)
# load data
julia_command("phenotypes = CSV.read(file_path, delim = ',', header=true);")
julia$eval("phenotypes") # print data
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
JuliaCall::julia_assign("model_equation", model_equation)
# R
R=1.0
JuliaCall::julia_assign("R", 0.1)
# run model
JuliaCall::julia_command("model1 = build_model(model_equation, R);")
JuliaCall::julia_assign("x1", "x1")
JuliaCall::julia_command("set_covariate(model1,x1);")
G1 = 1.0
G2 = diag(2)
JuliaCall::julia_assign("G1", 1.0)
JuliaCall::julia_assign("x2", "x2")
(model1,x2,G1)
JuliaCall::julia_command("set_random(model1,x2,G1);")
JuliaCall::julia_assign("x3", "x3")
JuliaCall::julia_command("outputMCMCsamples(model1,x3)")
JuliaCall::julia_command("out1=runMCMC(model1,phenotypes,chain_length=5000,output_samples_frequency=100);")
julia$eval("keys((out1out1))")
julia$eval("keys((out1))")
JuliaCall::julia_assign("mykey", "Posterior mean of location parameters")
julia$eval("out1[mykey]")
setwd("D:/myfirstpackage")
devtools::load_all()
library("myfirstpackage")
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
## Do initial setup
julia <- julia_setup()
#check version
julia_installed_package("JWAS")
#using Pkg
julia_library("JWAS")
julia_library("CSV")
file_path = "D:\\julialearn\\phenotypes.txt"
JuliaCall::julia_assign("file_path", file_path)
# load data
julia_command("phenotypes = CSV.read(file_path, delim = ',', header=true);")
julia$eval("phenotypes") # print data
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
JuliaCall::julia_assign("model_equation", model_equation)
JuliaCall::julia_assign("R", 0.1)
# R
R=1.0
# run model
JuliaCall::julia_command("model1 = build_model(model_equation, R);")
JuliaCall::julia_assign("x1", "x1")
JuliaCall::julia_command("set_covariate(model1,x1);")
G1 = 1.0
G2 = diag(2)
JuliaCall::julia_assign("G1", 1.0)
JuliaCall::julia_assign("x2", "x2")
JuliaCall::julia_command("set_random(model1,x2,G1);")
JuliaCall::julia_assign("x3", "x3")
JuliaCall::julia_command("outputMCMCsamples(model1,x3)")
JuliaCall::julia_command("out1=runMCMC(model1,phenotypes,chain_length=5000,output_samples_frequency=100);")
julia$eval("keys((out1))")
JuliaCall::julia_assign("mykey1", "Posterior mean of location parameters")
julia$eval("out1[mykey1]")
JuliaCall::julia_assign("mykey2", "Posterior mean of residual variance")
julia$eval("out1[mykey2]")
devtools::load_all()
library("myfirstpackage")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
phenotypes = myfirstpackage::phenotypes
myfirstpackage::assign("x1","x1")
myfirstpackage::ran_julia("set_covariate(model,x1);")
myfirstpackage::assign("G1",1.0)
myfirstpackage::assign("x2","x2")
myfirstpackage::ran_julia("set_random(model,x2,G1);")
JuliaCall::julia_assign("x3", "x3")
myfirstpackage::assign("x3","x3")
myfirstpackage::ran_julia("outputMCMCsamples(model,x3)")
myfirstpackage::assign("phenotypes",phenotypes)
myfirstpackage::ran_julia("out1=runMCMC(model,phenotypes,chain_length=5000,output_samples_frequency=100);")
a =  function(bb = 10)
{
print(bb)
}
a
a()
a(20)
a =  function(bb = 10)
{
JuliaCall::julia_assign("bb", bb)
julia$eval("bb")
}
a()
a(20)
a =  function(bb_v = 10)
{
JuliaCall::julia_assign("bb", bb_v)
julia$eval("bb")
}
a()
a(90)
devtools::load_all()
myfirstpackage::runMCMC(model, phenotypes,chain_length=5000,output_samples_frequency=100)
as.int64(1)
devtools::load_all()
myfirstpackage::runMCMC(model, phenotypes,chain_length=5000,output_samples_frequency=100)
myfirstpackage::runMCMC(model, phenotypes)
devtools::load_all()
myfirstpackage::runMCMC(model, phenotypes)
devtools::load_all()
myfirstpackage::runMCMC(model, phenotypes)
devtools::load_all()
myfirstpackage::runMCMC(model, phenotypes)
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
phenotypes = myfirstpackage::phenotypes
myfirstpackage::assign("phenotypes",phenotypes)
myfirstpackage::runMCMC(model, phenotypes)
myfirstpackage::runMCMC(model, phenotypes,chain_length=5000)
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
myfirstpackage::runMCMC(model, phenotypes,chain_length=5000)
JuliaCall::julia_assign("aa", 100)
JuliaCall::julia_eval(typeof(aa))
JuliaCall::julia_assign("aa", 100)
JuliaCall::julia_eval(typeof(aa))
julia_eval(typeof(aa))
JuliaCall::julia_command(typeof(aa))
JuliaCall::julia_command("typeof(aa)")
JuliaCall::julia_assign("aa", 100)
JuliaCall::julia_command("typeof(aa)")
JuliaCall::julia_assign("aa::Int64", 100)
JuliaCall::julia_command("typeof(aa)")
JuliaCall::julia_assign("aaa::Int64", 100)
JuliaCall::julia_command("typeof(aaa)")
JuliaCall::julia_command("bb = 100")
JuliaCall::julia_command("typeof(bb)")
devtools::load_all()
library("myfirstpackage")
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
myfirstpackage::runMCMC(model, phenotypes,chain_length=5000,output_samples_frequency=100)
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
myfirstpackage::assign("x3","x3")
myfirstpackage::ran_julia("outputMCMCsamples(model,x3)")
myfirstpackage::runMCMC(model, phenotypes,chain_length=5000,output_samples_frequency=100)
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
phenotypes = myfirstpackage::phenotypes
myfirstpackage::assign("phenotypes",phenotypes)
myfirstpackage::assign("x1","x1")
myfirstpackage::ran_julia("set_covariate(model,x1);")
myfirstpackage::assign("G1",1.0)
myfirstpackage::assign("x2","x2")
myfirstpackage::ran_julia("set_random(model,x2,G1);")
myfirstpackage::assign("x3","x3")
myfirstpackage::ran_julia("outputMCMCsamples(model,x3)")
myfirstpackage::runMCMC(model, phenotypes,chain_length=5000,output_samples_frequency=100)
out = myfirstpackage::runMCMC(model, phenotypes,chain_length=5000,output_samples_frequency=100)
devtools::load_all()
library("myfirstpackage")
# library(devtools)
# install_github("zhaotianjing/rJWAS")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
myfirstpackage::jwasr_setup(path_libjulia)
# equation
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
model = myfirstpackage::build_model(model_equation, R)
phenotypes = myfirstpackage::phenotypes
myfirstpackage::assign("phenotypes",phenotypes)
myfirstpackage::assign("x1","x1")
myfirstpackage::ran_julia("set_covariate(model,x1);")
myfirstpackage::assign("G1",1.0)
myfirstpackage::assign("x2","x2")
myfirstpackage::ran_julia("set_random(model,x2,G1);")
myfirstpackage::assign("x3","x3")
myfirstpackage::ran_julia("outputMCMCsamples(model,x3)")
out = myfirstpackage::runMCMC(model, phenotypes,chain_length=5000,output_samples_frequency=100)
out
model_equation2 ="y1 = intercept + x1 + x3
y2 = intercept + x1 + x2 + x3
y3 = intercept + x1 + x1*x3 + x2"
R = diag(3)
R
model2 = myfirstpackage::build_model(model_equation2,R);
myfirstpackage::assign("x1","x1")
myfirstpackage::ran_julia("set_covariate(model2,x1)")
