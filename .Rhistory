install.packages("evtools")
evtools::install_github("Non-Contradiction/JuliaCall")
evtools::install_github("Non-Contradiction/JuliaCall")
install.packages("devtools")
library(devtools)
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
install_github("Non-Contradiction/JuliaCall")
install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
library(devtools)
install_github("Non-Contradiction/JuliaCall")
devtools::install_github("Non-Contradiction/JuliaCall")
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools()
library(devtools)
install_github("Non-Contradiction/JuliaCall")
library(devtools)
install_github("Non-Contradiction/JuliaCall")
library(devtools)
install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
julia <- julia_setup()
devtools::install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
julia <- julia_setup()
installed.packages()
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
library(JuliaCall)
library(devtools)
install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
julia <- julia_setup()
devtools::install_github("Non-Contradiction/JuliaCall")
library(JuliaCall)
julia <- julia_setup()
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
remove.packages("RCall")
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
julia <- julia_setup()
JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
## Do initial setup
julia <- julia_setup()
library(JuliaCall)
## Do initial setup
julia <- julia_setup()
julia_installed_package("JWAS")
julia_library("JWAS")
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
remove.packages("JuliaCall","C:\\Users\\ztjsw\\Documents\\R\\win-library\\3.5")
library(devtools)
install_github("Non-Contradiction/JuliaCall")
devtools::check()
library(JuliaCall)
s
## Do initial setup
julia <- julia_setup()
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
library("JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = phenotypes  #build-in data
ped_path = "D:\\JWASr\\data\\pedigree.txt"
pedigree=get_pedigree(ped_path, separator=',', header=TRUE)
model_equation1 = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam"
R = 1.0
model1 = build_model(model_equation1,R)
set_covariate(model1, "x1")
G1 = 1.0
set_random(model1, "x2", G1)
G2 = diag(2)
set_random_ped(model1, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:\\JWASr\\data\\genotypes.txt"
pedigree
model1
# add_genotypes(model1, geno_path, G3, separator=',',header=TRUE)
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,separator =',')
JuliaCall::julia_assign("geno_path", geno_path)
JuliaCall::julia_eval("geno_path")
JuliaCall::julia_assign("G3", G3)
JuliaCall::julia_eval("G3")
JuliaCall::julia_assign("separator", ',')
JuliaCall::julia_eval("separator")
JuliaCall::julia_call("add_genotypes",model1,JuliaCall::julia_eval("geno_path"),
JuliaCall::julia_eval("G3"),JuliaCall::julia_eval("separator"))
JuliaCall::julia_call("add_genotypes",model1,JuliaCall::julia_eval("geno_path"),
JuliaCall::julia_eval("G3"),separator=JuliaCall::julia_eval("separator"))
JuliaCall::julia_assign("model1", model1)
JuliaCall::julia_eval("model1")
JuliaCall::julia_call("add_genotypes",JuliaCall::julia_eval("model1"),JuliaCall::julia_eval("geno_path"),
JuliaCall::julia_eval("G3"),separator=JuliaCall::julia_eval("separator"))
# JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_command("add_genotypes(model1, geno_path, G3, separator = separator)")
# JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_command("add_genotypes(model1, geno_path, G3, separator = ',')")
JuliaCall::julia_eval("separator")
JuliaCall::julia_assign("sep", ',')
# JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_command("add_genotypes(model1, geno_path, G3, separator = sep)")
JuliaCall::julia_assign("sep", ",")
JuliaCall::julia_eval("sep")
# JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_command("add_genotypes(model1, geno_path, G3, separator = sep)")
# JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_command("add_genotypes(model1, geno_path, G3, separator = ',')")
JuliaCall::julia_assign("sep", ",")
JuliaCall::julia_eval("sep")
JuliaCall::julia_call("add_genotypes",model1,geno_path,
G3,separator=JuliaCall::julia_eval("sep"))
JuliaCall::julia_call("add_genotypes",model1,geno_path,
G3,separator=',')
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3)
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,',')
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,header = 1)
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,header = as.integer(1))
as.integer(1)
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,header = as.integer(1))
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3)
JuliaCall::julia_command("using DelimitedFiles")
# JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_command("add_genotypes(model1, geno_path, G3, separator = sep)")
# JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_command("add_genotypes(model1, geno_path, G3, separator = ',')")
JuliaCall::julia_command("using DelimitedFiles")
# JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_command("add_genotypes(model1, geno_path, G3, separator = ',')")
# JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_command("using DelimitedFiles;add_genotypes(model1, geno_path, G3, separator = ',')")
View(phenotypes)
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
library("JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = phenotypes  #build-in data
ped_path = "D:\\JWASr\\data\\pedigree.txt"
pedigree=get_pedigree(ped_path, separator=',', header=TRUE)
model_equation1 = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam"
R = 1.0
model1 = build_model(model_equation1,R)
set_covariate(model1, "x1")
G1 = 1.0
set_random(model1, "x2", G1)
G2 = diag(2)
set_random_ped(model1, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:\\JWASr\\data\\genotypes.txt"
JuliaCall::julia_assign("geno_path", geno_path)
JuliaCall::julia_assign("G3", G3)
JuliaCall::julia_assign("separator", ',')
JuliaCall::julia_assign("sep", ",")
JuliaCall::julia_command("using DelimitedFiles;add_genotypes(model1, geno_path, G3, separator = ',')")
JuliaCall::julia_assign("model1", model1)
JuliaCall::julia_command("using DelimitedFiles;add_genotypes(model1, geno_path, G3, separator = ',')")
JuliaCall::julia_command("using DelimitedFiles;add_genotypes(model1, geno_path, G3, separator = separator)")
JuliaCall::julia_command("using DelimitedFiles;add_genotypes(model1, geno_path, G3, separator = sep)")
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3)
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,separator = ',')
JuliaCall::julia_command("using DelimitedFiles;add_genotypes(model1, geno_path, G3, separator = ',')")
JuliaCall::julia_command("using DelimitedFiles;add_genotypes(model1, geno_path, G3, separator = ',')")
JuliaCall::julia_command("add_genotypes(model1, geno_path, G3, separator = ',')")
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,separator = ',')
add_genotypes = JuliaCall::julia_eval("add_genotypes")
add_genotypes(model1, geno_path, G3, separator = ',')
add_genotypes(model1, geno_path, G3)
add_genotypes = JuliaCall::julia_eval("add_genotypes")
View(add_genotypes)
add_genotypes(model1, geno_path, G3, separator = ",")
JuliaCall::julia_assign(s, ",")
s='s'
JuliaCall::julia_assign(s, ",")
JuliaCall::julia_eval("s")
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
library("JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = phenotypes  #build-in data
ped_path = "D:\\JWASr\\data\\pedigree.txt"
pedigree=get_pedigree(ped_path, separator=',', header=TRUE)
model_equation1 = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam"
R = 1.0
model1 = build_model(model_equation1,R)
set_covariate(model1, "x1")
G1 = 1.0
set_random(model1, "x2", G1)
G2 = diag(2)
set_random_ped(model1, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:\\JWASr\\data\\genotypes.txt"
JuliaCall::julia_assign("geno_path", geno_path)
JuliaCall::julia_assign("G3", G3)
JuliaCall::julia_assign("model_temp", model1)
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,separator = ',')
JuliaCall::julia_command("add_genotypes(model_temp, geno_path, G3, separator = ',')")
#
# JuliaCall::julia_assign("separator", ',')
JuliaCall::julia_assign("sep", ",")
JuliaCall::julia_command("add_genotypes(model_temp, geno_path, G3, separator = sep)")
header = TRUE
JuliaCall::julia_assign("header_temp", as.integer(header))
JuliaCall::julia_command("header_temp=convert(Bool,header_temp)")
JuliaCall::julia_eval("header_temp")
header = TRUE
#header
JuliaCall::julia_assign("header_temp", as.integer(header))
JuliaCall::julia_command("header_temp=convert(Bool,header_temp)")
JuliaCall::julia_command("add_genotypes(model_temp,geno_path,G3,separator=',',header = header_temp)")
JuliaCall::julia_command("add_genotypes(model_temp,geno_path,G3,separator=',',header = Int(1))")
JuliaCall::julia_command("add_genotypes(model_temp,geno_path,G3,separator=',',header = header_temp)")
JuliaCall::julia_eval("model_temp_add_geno")
JuliaCall::julia_eval("model_temp")
model1
outputMCMCsamples(model1, "x2")
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
devtools::document() #update
library("JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = phenotypes  #build-in data
ped_path = "D:\\JWASr\\data\\pedigree.txt"
pedigree=get_pedigree(ped_path, separator=',', header=TRUE)
model_equation1 = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam"
R = 1.0
model1 = build_model(model_equation1,R)
set_covariate(model1, "x1")
G1 = 1.0
set_random(model1, "x2", G1)
G2 = diag(2)
set_random_ped(model1, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:\\JWASr\\data\\genotypes.txt"
add_genotypes(model1, geno_path, G3, separator = ",")
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
library("JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = phenotypes  #build-in data
ped_path = "D:\\JWASr\\data\\pedigree.txt"
pedigree=get_pedigree(ped_path, separator=',', header=TRUE)
model_equation1 = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam"
R = 1.0
model1 = build_model(model_equation1,R)
set_covariate(model1, "x1")
G1 = 1.0
set_random(model1, "x2", G1)
G2 = diag(2)
set_random_ped(model1, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:\\JWASr\\data\\genotypes.txt"
add_genotypes(model1, geno_path, G3, separator = ",")
outputMCMCsamples(model1, "x2")
out = runMCMC(data = phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
out = runMCMC(model1, data = phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
JuliaCall::julia_call("runMCMC", model1, phenotypes, estimatePi=T, chain_length = 5000, methods = "BayesC", output_samples_frequency = 100, outputEBV = F)
JuliaCall::julia_call("runMCMC", model1, phenotypes, estimatePi=T, chain_length = 5000, methods = "BayesC", output_samples_frequency = 100, outputEBV = as.integer(0))
JuliaCall::julia_call("runMCMC", model1, phenotypes, estimatePi=T, chain_length = 5000, methods = "BayesC", output_samples_frequency = 100)
D
D
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
devtools::document() #update
out = JWASr::runMCMC(model1, data = phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
library("JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = phenotypes  #build-in data
ped_path = "D:\\JWASr\\data\\pedigree.txt"
pedigree=get_pedigree(ped_path, separator=',', header=TRUE)
model_equation1 = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam"
R = 1.0
model1 = build_model(model_equation1,R)
set_covariate(model1, "x1")
G1 = 1.0
set_random(model1, "x2", G1)
G2 = diag(2)
set_random_ped(model1, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:\\JWASr\\data\\genotypes.txt"
add_genotypes(model1, geno_path, G3, separator = ",")
outputMCMCsamples(model1, "x2")
out = JWASr::runMCMC(model1, data = phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
out
JuliaCall::julia_call("readgenotypes",geno_path,separator=',',header=T,rowID=T,center=T)
JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_call("readgenotypes",geno_path,separator=',',header=T,rowID=T,center=T)
JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_installed_package("DelimitedFiles")
JuliaCall::julia_installed_package("JWAS")
JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_call("readgenotypes",geno_path,separator=',',header=T,rowID=T,center=T)
JuliaCall::julia_call("readdlm",geno_path,',',header=T)
JuliaCall::julia_library("DelimitedFiles")
JuliaCall::julia_call("readdlm",geno_path,',',header=T)
geno_path
JuliaCall::julia_library("DelimitedFiles")
path="D:\\JWASr\\data\\genotypes.txt"
JuliaCall::julia_call("readdlm",path,',',header=T)
JuliaCall::julia_library("DelimitedFiles")
path="D:\\JWASr\\data\\genotypes.txt"
JuliaCall::julia_call("readdlm",path,',')
JuliaCall::julia_assign("path", path)
JuliaCall::julia_command("readdlm(path,',')")
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
library("JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = phenotypes  #build-in data
JuliaCall::julia_assign("path", path)
path="D:\\JWASr\\data\\genotypes.txt"
JuliaCall::julia_assign("path", path)
JuliaCall::julia_command("readdlm(path,',')")
JuliaCall::julia_eval("path")
JuliaCall::julia_assign("path", path)
model1
phenotypes = phenotypes  #build-in data
ped_path = "D:\\JWASr\\data\\pedigree.txt"
pedigree=get_pedigree(ped_path, separator=',', header=TRUE)
model_equation1 = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam"
R = 1.0
model1 = build_model(model_equation1,R)
model1
toString(12)
toString(model1)
model1
path
julia_call("readdlm", path, julia_eval("','"))
JuliaCall::julia_library("DelimitedFiles")
path="D:\\JWASr\\data\\genotypes.txt"
julia_call("readdlm", path, julia_eval("','"))
JuliaCall::julia_call("readdlm", path, julia_eval("','"))
JuliaCall::julia_call("readdlm", path, JuliaCall::julia_eval("','"))
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
library("JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = phenotypes  #build-in data
ped_path = "D:\\JWASr\\data\\pedigree.txt"
pedigree=get_pedigree(ped_path, separator=',', header=TRUE)
model_equation1 = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam"
R = 1.0
model1 = build_model(model_equation1,R)
set_covariate(model1, "x1")
G1 = 1.0
set_random(model1, "x2", G1)
G2 = diag(2)
set_random_ped(model1, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:\\JWASr\\data\\genotypes.txt"
# JuliaCall::julia_assign("geno_path", geno_path)
# JuliaCall::julia_assign("G3", G3)
#
# JuliaCall::julia_assign("separator", ',')
# JuliaCall::julia_assign("sep", ",")
#
# JuliaCall::julia_assign("model_temp", model1)
#
#
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,separator = JuliaCall::julia_eval("','"))
# JuliaCall::julia_assign("geno_path", geno_path)
# JuliaCall::julia_assign("G3", G3)
#
# JuliaCall::julia_assign("separator", ',')
# JuliaCall::julia_assign("sep", ",")
#
# JuliaCall::julia_assign("model_temp", model1)
#
#
separator=','
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,separator = JuliaCall::julia_eval("separator"))
# JuliaCall::julia_assign("geno_path", geno_path)
# JuliaCall::julia_assign("G3", G3)
#
# JuliaCall::julia_assign("separator", ',')
# JuliaCall::julia_assign("sep", ",")
#
# JuliaCall::julia_assign("model_temp", model1)
#
#
separator=','
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,separator = JuliaCall::julia_eval("separator"))
# JuliaCall::julia_assign("geno_path", geno_path)
# JuliaCall::julia_assign("G3", G3)
#
# JuliaCall::julia_assign("separator", ',')
# JuliaCall::julia_assign("sep", ",")
#
# JuliaCall::julia_assign("model_temp", model1)
#
#
JuliaCall::julia_assign("separator",',')
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,separator = JuliaCall::julia_eval("separator"))
# JuliaCall::julia_assign("geno_path", geno_path)
# JuliaCall::julia_assign("G3", G3)
#
# JuliaCall::julia_assign("separator", ',')
# JuliaCall::julia_assign("sep", ",")
#
# JuliaCall::julia_assign("model_temp", model1)
#
#
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,separator = JuliaCall::julia_eval("','"))
# JuliaCall::julia_assign("geno_path", geno_path)
# JuliaCall::julia_assign("G3", G3)
#
# JuliaCall::julia_assign("separator", ',')
# JuliaCall::julia_assign("sep", ",")
#
# JuliaCall::julia_assign("model_temp", model1)
#
#
JuliaCall::julia_call("add_genotypes",model1,geno_path,G3,separator = JuliaCall::julia_eval("','"),header = T)
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
library("JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = phenotypes  #build-in data
ped_path = "D:\\JWASr\\data\\pedigree.txt"
pedigree=get_pedigree(ped_path, separator=',', header=TRUE)
model_equation1 = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam"
R = 1.0
model1 = build_model(model_equation1,R)
set_covariate(model1, "x1")
G1 = 1.0
set_random(model1, "x2", G1)
G2 = diag(2)
set_random_ped(model1, "ID dam", pedigree, G2)
G3 = 1.0
geno_path = "D:\\JWASr\\data\\genotypes.txt"
add_genotypes(model1, geno_path, G3, separator=',',header=TRUE)
outputMCMCsamples(model1, "x2")
out = runMCMC(model1, phenotypes, methods = "BayesC", estimatePi = TRUE,
chain_length = 5000, output_samples_frequency = 100)
out
model_equation2 ="y1 = intercept + x1 + x3 + ID + dam
y2 = intercept + x1 + x2 + x3 + ID
y3 = intercept + x1 + x1*x3 + x2 + ID"
R = diag(3)
model2 = build_model(model_equation2, R)
set_covariate(model2, "x1")
G1 = diag(2)
set_random(model2, "x2", G1)
G2 = diag(4)
set_random_ped(model2, "ID dam", pedigree, G2)
G3 = diag(3)
geno_path = "D:/JWASr/data/genotypes.txt"  #please change to your local path
add_genotypes(model2, geno_path, G3, separator = ',', header = TRUE)
outputMCMCsamples(model2, "x2")
out = runMCMC(model2, phenotypes, methods = "BayesC", estimatePi = TRUE, chain_length = 5000, output_samples_frequency = 100)
out
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
devtools::document() #update
devtools::document() #update
devtools::load_all() #load
setwd("D:/JWASr")
devtools::load_all() #load
devtools::document() #update
library("JWASr")
