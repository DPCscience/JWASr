library(pedigreemm)
library(MCMCglmm)
data<-read.table("Phenotype1.txt", header = TRUE, dec = ".")
data$animal<-as.factor(data$animal)
data$MOTHER <-as.factor(data$MOTHER)
data$d13C_C<-as.numeric(data$d13C_C)
data$d13C_S<-as.numeric(data$d13C_S)
data$Delta13_C<-as.numeric(data$Delta13_C)
data$Delta13_S<-as.numeric(data$Delta13_S)
data$C._C<-as.numeric(data$C._C)
data$C._S<-as.numeric(data$C._S)
data$d15N_C<-as.numeric(data$d15N_C)
data$d15N_S<-as.numeric(data$d15N_S)
data$N._C<-as.numeric(data$N._C)
data$N._S<-as.numeric(data$N._S)
data$C.N_C<-as.numeric(data$C.N_C)
data$C.N_S<-as.numeric(data$C.N_S)
head(data)
pedigree<-read.table("PedigreeFile1.txt", header = TRUE, dec = ".")
head(pedigree)
prior1.1 <- list(G = list(G1 = list(V = 0.5, nu = 1)), R = list(V = 0.5, nu = 1))
model1.1 <- MCMCglmm(d13C_C ~ 1, random = ~animal, pedigree = pedigree,data = data, prior = prior1.1)
plot(model1.1$Sol)
plot(model1.1$VCV)
model1.1 <- MCMCglmm(d13C_C ~ 1, random = ~animal, pedigree = pedigree, data = data, nitt = 500000, thin = 100, burnin = 100000, prior = prior1.1, verbose = FALSE, pr = TRUE)
autocorr(model1.1$VCV)
posterior.mode(model1.1$VCV)
HPDinterval(model1.1$VCV)
posterior.heritability1.1 <- model1.1$VCV[, "animal"]/(model1.1$VCV[, "animal"] + model1.1$VCV[, "units"])
HPDinterval(posterior.heritability1.1, 0.95)
posterior.mode(posterior.heritability1.1)
plot(posterior.heritability1.1)
summary(posterior.heritability1.1)
summary(model1.1)
model1.1$Sol
write.csv (model1.1$Sol, "EBV-model11.csv", quote = F)
model1.1.Sol <- colMeans(model1.1$Sol)
write.csv (model1.1.Sol, "EBV-model11sol.csv", quote = F)
setwd("/Volumes/NO NAME/Carbon Isotope-EBV-Hao")
library(pedigreemm)
library(MCMCglmm)
data<-read.table("Phenotype1.txt", header = TRUE, dec = ".")
data$animal<-as.factor(data$animal)
data$MOTHER <-as.factor(data$MOTHER)
data$d13C_C<-as.numeric(data$d13C_C)
data$d13C_S<-as.numeric(data$d13C_S)
data$Delta13_C<-as.numeric(data$Delta13_C)
data$Delta13_S<-as.numeric(data$Delta13_S)
data$C._C<-as.numeric(data$C._C)
data$C._S<-as.numeric(data$C._S)
data$d15N_C<-as.numeric(data$d15N_C)
data$d15N_S<-as.numeric(data$d15N_S)
data$N._C<-as.numeric(data$N._C)
data$N._S<-as.numeric(data$N._S)
data$C.N_C<-as.numeric(data$C.N_C)
data$C.N_S<-as.numeric(data$C.N_S)
head(data)
pedigree<-read.table("PedigreeFile1.txt", header = TRUE, dec = ".")
head(pedigree)
prior1.1 <- list(G = list(G1 = list(V = 0.5, nu = 1)), R = list(V = 0.5, nu = 1))
model1.1 <- MCMCglmm(d13C_C ~ 1, random = ~animal, pedigree = pedigree,data = data, prior = prior1.1)
plot(model1.1$Sol)
plot(model1.1$VCV)
model1.1 <- MCMCglmm(d13C_C ~ 1, random = ~animal, pedigree = pedigree, data = data, nitt = 500000, thin = 100, burnin = 100000, prior = prior1.1, verbose = FALSE, pr = TRUE)
autocorr(model1.1$VCV)
posterior.mode(model1.1$VCV)
HPDinterval(model1.1$VCV)
posterior.heritability1.1 <- model1.1$VCV[, "animal"]/(model1.1$VCV[, "animal"] + model1.1$VCV[, "units"])
HPDinterval(posterior.heritability1.1, 0.95)
posterior.mode(posterior.heritability1.1)
plot(posterior.heritability1.1)
summary(posterior.heritability1.1)
summary(model1.1)
model1.1$Sol
write.csv (model1.1$Sol, "EBV-model11.csv", quote = F)
model1.1.Sol <- colMeans(model1.1$Sol)
write.csv (model1.1.Sol, "EBV-model11sol.csv", quote = F)
install.packages("JuliaCall")
sessionInfo()
library(JuliaCall)
sessionInfo()
#JuliaCall:::juliacall_initialize("C:\\Users\\ztjsw\\AppData\\Local\\Julia-0.7.0\\bin\\libjulia.dll")
library(JuliaCall)
## Do initial setup
julia <- julia_setup()
#check version
julia_installed_package("JWAS")
#using Pkg
julia_library("JWAS")
julia_library("CSV")
file_path = "D:\\julialearn\\phenotypes.txt"
file_path = "phenotypes.txt"
JuliaCall::julia_assign("file_path", file_path)
# load data
julia_command("phenotypes = CSV.read(file_path, delim = ',', header=true)")
getwd()
file_path = "/Users/qtlcheng/Github/JWASr/phenotypes.txt"
JuliaCall::julia_assign("file_path", file_path)
# load data
julia_command("phenotypes = CSV.read(file_path, delim = ',', header=true)")
julia$eval("phenotypes") # print data
# equation
model_equation = "y1 = intercept + x1"
JuliaCall::julia_assign("model_equation", model_equation)
# R
R=1.0
# run model
JuliaCall::julia_command("model = build_model(model_equation, R)")
# R
R=1.0
JuliaCall::julia_assign("R", 0.1)
# run model
JuliaCall::julia_command("model = build_model(model_equation, R)")
# run model
JuliaCall::julia_command("model = build_model(model_equation, R)");
JuliaCall::julia_command("out = runMCMC(model, phenotypes)")  #bugs!
julia$eval("out") #print out
o=julia$eval("out") #print out
o
o[`Posterior mean of residual variance`]
o[1]
o[2]
buld_model = function(model_equation,R){
JuliaCall::julia_assign("R", R)
JuliaCall::julia_assign("model_equation", model_equation)
JuliaCall::julia_command("model = build_model(model_equation, R)");
model=julia$eval("model") #print out
return(model)
}
runMCMC = function(model,phenotypes){
JuliaCall::julia_assign("model", model)
JuliaCall::julia_assign("phenotypes", phenotypes)
JuliaCall::julia_command("out = runMCMC(model, phenotypes)")
out=julia$eval("out")
return(out)
}
library(JuliaCall)
## Do initial setup
julia <- julia_setup()
#check version
julia_installed_package("JWAS")
#using Pkg
julia_library("JWAS")
julia_library("CSV")
#Functions
buld_model = function(model_equation,R){
JuliaCall::julia_assign("R", R)
JuliaCall::julia_assign("model_equation", model_equation)
JuliaCall::julia_command("model = build_model(model_equation, R)");
model=julia$eval("model") #print out
return(model)
}
runMCMC = function(model,phenotypes){
JuliaCall::julia_assign("model", model)
JuliaCall::julia_assign("phenotypes", phenotypes)
JuliaCall::julia_command("out = runMCMC(model, phenotypes)")
out=julia$eval("out")
return(out)
}
#File path
file_path = "/Users/qtlcheng/Github/JWASr/phenotypes.txt"
JuliaCall::julia_assign("file_path", file_path)
# load data
julia_command("phenotypes = CSV.read(file_path, delim = ',', header=true)")
julia$eval("phenotypes") # print data
# equation
model_equation = "y1 = intercept + x1"
R=1.0
# run model
model=build_model(model_equation,R)
#Functions
build_model = function(model_equation,R){
JuliaCall::julia_assign("R", R)
JuliaCall::julia_assign("model_equation", model_equation)
JuliaCall::julia_command("model = build_model(model_equation, R)");
model=julia$eval("model") #print out
return(model)
}
runMCMC = function(model,phenotypes){
JuliaCall::julia_assign("model", model)
JuliaCall::julia_assign("phenotypes", phenotypes)
JuliaCall::julia_command("out = runMCMC(model, phenotypes)")
out=julia$eval("out")
return(out)
}
#File path
file_path = "/Users/qtlcheng/Github/JWASr/phenotypes.txt"
JuliaCall::julia_assign("file_path", file_path)
# load data
julia_command("phenotypes = CSV.read(file_path, delim = ',', header=true)")
julia$eval("phenotypes") # print data
# equation
model_equation = "y1 = intercept + x1"
R=1.0
# run model
model=build_model(model_equation,R)
runMCMC(model,phenotypes)
# load data
julia_command("phenotypes = CSV.read(file_path, delim = ',', header=true)")
julia$eval("phenotypes") # print data
phenotypes
#File path
file_path = "/Users/qtlcheng/Github/JWASr/phenotypes.txt"
JuliaCall::julia_assign("file_path", file_path)
# load data
julia_command("phenotypes = CSV.read(file_path, delim = ',', header=true)")
phenotypes=julia$eval("phenotypes") # print data
# equation
model_equation = "y1 = intercept + x1"
R=1.0
# run model
model=build_model(model_equation,R)
runMCMC(model,phenotypes)
runMCMC = function(model,phenotypes){
JuliaCall::julia_assign("model", model)
JuliaCall::julia_assign("phenotypes", phenotypes)
JuliaCall::julia_command("out = runMCMC(model, phenotypes)")
#out=julia$eval("out")
#return(out)
return julia$eval("out")
}
phenotypes = read.csv("/Users/qtlcheng/Github/JWASr/phenotypes.txt",header=T,delim = ',')
phenotypes = read.csv("/Users/qtlcheng/Github/JWASr/phenotypes.txt",header=T,sep = ',')
build_model = function(model_equation,R){
JuliaCall::julia_assign("R", R)
JuliaCall::julia_assign("model_equation", model_equation)
JuliaCall::julia_command("model = build_model(model_equation, R)");
model=julia$eval("model") #print out
return(model)
}
runMCMC = function(model,phenotypes){
JuliaCall::julia_assign("model", model)
JuliaCall::julia_assign("phenotypes", phenotypes)
JuliaCall::julia_command("out = runMCMC(model, phenotypes)")
out=julia$eval("out")
return(out)
}
#File path
file_path = "/Users/qtlcheng/Github/JWASr/phenotypes.txt"
phenotypes = read.csv(file_path,header=T,sep = ',')
# equation
model_equation = "y1 = intercept + x1"
R=1.0
# run model
model=build_model(model_equation,R)
runMCMC(model,phenotypes)
#File path
file_path = "/Users/qtlcheng/Github/JWASr/phenotypes.txt"
phenotypes = read.csv(file_path,header=T,sep = ',')
# equation
model_equation = "y1 = intercept + x1"
R=1.0
# run model
model=build_model(model_equation,R)
runMCMC(model,phenotypes)
#File path
file_path = "/Users/qtlcheng/Github/JWASr/phenotypes.txt"
phenotypes = read.csv(file_path,header=T,sep = ',')
# equation
model_equation = "y1 = intercept + x1"
R=1.0
# run model
model=build_model(model_equation,R)
runMCMC(model,phenotypes)
library(JuliaCall)
## Do initial setup
julia <- julia_setup()
#check version
julia_installed_package("JWAS")
#using Pkg
julia_library("JWAS")
julia_library("CSV")
#File path
file_path = "/Users/qtlcheng/Github/JWASr/phenotypes.txt"
phenotypes = read.csv(file_path,header=T,sep = ',')
# equation
model_equation = "y1 = intercept + x1"
R=1.0
# run model
model=build_model(model_equation,R)
runMCMC(model,phenotypes)
A=matrix(c(1.0, -0.0,0.5,0.5,-0.0,0.5,
-0.0,,1.0,0.5,0.5,0.0,-0.0,
0.5,,0.5,1.0,0.5,-0.0,0.25,
0.5,,0.5,0.5,1.0,0.0,0.25,
0.0,,0.0,0.0,0.0,1.0,0.5,
0.5,,-0.0,0.25,0.25,0.51.0),nrow=6)
A=matrix(c(1.0, -0.0,0.5,0.5,-0.0,0.5,
-0.0,,1.0,0.5,0.5,0.0,-0.0,
0.5,,0.5,1.0,0.5,-0.0,0.25,
0.5,,0.5,0.5,1.0,0.0,0.25,
0.0,,0.0,0.0,0.0,1.0,0.5,
0.5,,-0.0,0.25,0.25,0.51.0),nrow=6)
A=matrix(c(1.0,-0.0,0.5,0.5,-0.0,0.5,
-0.0,,1.0,0.5,0.5,0.0,-0.0,
0.5,,0.5,1.0,0.5,-0.0,0.25,
0.5,,0.5,0.5,1.0,0.0,0.25,
0.0,,0.0,0.0,0.0,1.0,0.5,
0.5,,-0.0,0.25,0.25,0.51.0),nrow=6)
A=matrix(c(1.0,-0.0,0.5,0.5,-0.0,0.5,
-0.0,,1.0,0.5,0.5,0.0,-0.0,
0.5,,0.5,1.0,0.5,-0.0,0.25,
0.5,,0.5,0.5,1.0,0.0,0.25,
0.0,,0.0,0.0,0.0,1.0,0.5,
0.5,,-0.0,0.25,0.25,0.5,1.0),nrow=6)
A=matrix(c(1.0,-0.0,0.5,0.5,-0.0,0.5,
-0.0,1.0,0.5,0.5,0.0,-0.0,
0.5,0.5,1.0,0.5,-0.0,0.25,
0.5,0.5,0.5,1.0,0.0,0.25,
0.0,0.0,0.0,0.0,1.0,0.5,
0.5,-0.0,0.25,0.25,0.5,1.0),nrow=6)
A
heatmap(A)
heatmap(A, main="heatmap")
heatmap(A, main="numerator relationship amtrix")
heatmap(A,Colv = NA, main="numerator relationship amtrix")
heatmap(A,Colv = NA,Rowv = NA, main="numerator relationship amtrix")
heatmap(A,Colv = NA,Rowv = NA,
labRow=("aniaml 1","aniaml 2","aniaml 3","aniaml 4","aniaml 5","aniaml 6")
#labRow=("aniaml 1","aniaml 2","aniaml 3","aniaml 4","aniaml 5","aniaml 6")
main="numerator relationship amtrix")
heatmap(A,Colv = NA,Rowv = NA,
labRow=("aniaml 1","aniaml 2","aniaml 3","aniaml 4","aniaml 5","aniaml 6"),
#labRow=("aniaml 1","aniaml 2","aniaml 3","aniaml 4","aniaml 5","aniaml 6")
main="numerator relationship amtrix")
heatmap(A,Colv = NA,Rowv = NA,
#labRow=("aniaml 1","aniaml 2","aniaml 3","aniaml 4","aniaml 5","aniaml 6"),
#labRow=("aniaml 1","aniaml 2","aniaml 3","aniaml 4","aniaml 5","aniaml 6")
main="numerator relationship amtrix")
heatmap(A,Colv = NA,Rowv = NA,
labRow=("aniaml 1","aniaml 2","aniaml 3","aniaml 4","aniaml 5","aniaml 6"),
main="numerator relationship amtrix")
heatmap(A,Colv = NA,Rowv = NA,
labRow=c("aniaml 1","aniaml 2","aniaml 3","aniaml 4","aniaml 5","aniaml 6"),
main="numerator relationship amtrix")
heatmap(A,Colv = NA,Rowv = NA,
labRow=c("aniaml 1","aniaml 2","aniaml 3","aniaml 4","aniaml 5","aniaml 6"),
labCol=c("aniaml 1","aniaml 2","aniaml 3","aniaml 4","aniaml 5","aniaml 6"),
main="numerator relationship amtrix")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("zhaotianjing/JWASr")
libray("JWASr")
library("JWASr")
install_github("zhaotianjing/JWASr")
library(devtools)
install_github("zhaotianjing/JWASr")
tempdir()
packageVersion("devtools")
library(devtools)
install_github("zhaotianjing/JWASr")
traceback()
install.packages("devtools")
library(devtools)
install_github("zhaotianjing/JWASr")
install_github("zhaotianjing/JWASr",force=TRUE)
library(devtools)
install_github("zhaotianjing/JWASr")
remove.packages(devtools)
remove.packages("devtools")
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
install_github("zhaotianjing/JWASr")
devtools::install_github("hadley/devtools")
library(devtools)
install_github("zhaotianjing/JWASr")
install_github("zhaotianjing/JWASr")
pheno_path = "../data/pedigree.txt"
phenotypes = read.csv(pheno_path)  #build-in data
pheno_path = "pedigree.txt"
phenotypes = read.csv(pheno_path)  #build-in data
library("JWASr")
pheno_path = phenotypes
pheno_path
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
build_model(model_equation, R)  #build "model" in Julia
library("JWASr")
pheno_path = phenotypes
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
build_model(model_equation, R)  #build "model" in Julia
JWASr::jwasr_setup()
devtools::document()
install_github("zhaotianjing/JWASr")
library(devtools)
install_github("zhaotianjing/JWASr")
library("JWASr")
library(devtools)
install_github("zhaotianjing/JWASr")
library("JWASr")
JWASr::jwasr_setup()
devtools::document()
library(devtools)
library(devtools)
install_github("zhaotianjing/JWASr")
#devtools::document()
library("JWASr")
JWASr::jwasr_setup()
JWASr::jwasr_setup_win()
JWASr::jwasr_setup_win("C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll")
library(devtools)
install_github("zhaotianjing/JWASr")
#devtools::document()
library("JWASr")
JWASr::jwasr_setup()
cd("Github/JWASr/")
setwd("Github/JWASr/")
devtools::document()
library(devtools)
install_github("zhaotianjing/JWASr")
#devtools::document()
library("JWASr")
JWASr::jwasr_setup()
JWASr::jwasr_setup()
#devtools::document()
library("JWASr")
pheno_path = phenotypes
model_equation = "y1 = intercept + x1*x3 + x2 + x3"
R = 1.0
build_model(model_equation, R)  #build "model" in Julia
