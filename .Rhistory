path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
model_equation ="y1 = intercept + x1 + x3 + ID + dam
y2 = intercept + x1 + x2 + x3 + ID
y3 = intercept + x1 + x1*x3 + x2 + ID"
R = diag(3)
model = JWASr::build_model(model_equation, R)  #build "model" in Julia
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1)")
JWASr::assign("G1", diag(2))
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(4))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model,phenotypes,chain_length=5000,output_samples_frequency=100, outputEBV = 1)   #outputEBV  = 1: true; 0: false
as.integer(TRUE)
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
model_equation ="y1 = intercept + x1 + x3 + ID + dam
y2 = intercept + x1 + x2 + x3 + ID
y3 = intercept + x1 + x1*x3 + x2 + ID"
R = diag(3)
model = JWASr::build_model(model_equation, R)  #build "model" in Julia
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1)")
JWASr::assign("G1", diag(2))
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(4))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model,phenotypes,chain_length=5000,output_samples_frequency=100, outputEBV = 1)   #outputEBV  = 1: true; 0: false
out = JWASr::runMCMC(model,phenotypes,chain_length=5000,output_samples_frequency=100, outputEBV = FALSE)   #outputEBV  = 1: true; 0: false
model_equation ="y1 = intercept + x1 + x3 + ID + dam
y2 = intercept + x1 + x2 + x3 + ID
y3 = intercept + x1 + x1*x3 + x2 + ID"
R = diag(3)
model = JWASr::build_model(model_equation, R)  #build "model" in Julia
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1)")
JWASr::assign("G1", diag(2))
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(4))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
devtools::document()
# #add date
# map = read.csv("D:\\julialearn\\JWAS.jl\\src\\5.Datasets\\data\\example\\map.txt")
# devtools::use_data(map)
setwd("D:/JWASr")
devtools::load_all()
# library("JWASr")
# library(devtools)
# install_github("zhaotianjing/JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
model_equation ="y1 = intercept + x1 + x3 + ID + dam
y2 = intercept + x1 + x2 + x3 + ID
y3 = intercept + x1 + x1*x3 + x2 + ID"
R = diag(3)
model = JWASr::build_model(model_equation, R)  #build "model" in Julia
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1)")
JWASr::assign("G1", diag(2))
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(4))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model,phenotypes,chain_length=5000,output_samples_frequency=100, outputEBV = FALSE)   #outputEBV  = 1: true; 0: false
out
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
setwd("D:/JWASr")
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
JWASr::jwasr_setup_win(path_libjulia)
model = JWASr::build_model(model_equation, R)  #build "model" in Julia
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::ran_julia("set_covariate(model,x1)")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(4))
out = JWASr::runMCMC(model,phenotypes,chain_length=5000,output_samples_frequency=100, outputEBV = 1)   #outputEBV  = 1: true; 0: false
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model,phenotypes,chain_length=5000,output_samples_frequency=100, outputEBV = T)   #outputEBV  = 1: true; 0: false
model_equation ="y1 = intercept + x1 + x3 + ID + dam
y2 = intercept + x1 + x2 + x3 + ID
y3 = intercept + x1 + x1*x3 + x2 + ID"
R = diag(3)
model = JWASr::build_model(model_equation, R)  #build "model" in Julia
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1)")
JWASr::assign("G1", diag(2))
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(4))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model,phenotypes,chain_length=5000,output_samples_frequency=100, outputEBV = TRUE)
out$EBV_y2
out
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
#update package
devtools::document()
setwd("D:/JWASr")
#update package
devtools::document()
devtools::load_all()
devtools::load_all()
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1);")
JWASr::assign("G1", 1.0)
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(2))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"
JWASr::add_genotypes(geno_path, G3)  #separator=',' is default
JWASr::assign("a1","a1")
JWASr::assign("a2","a2")
JWASr::assign("a3","a3")
JWASr::ran_julia("outputEBV(model,[a1,a2,a3]);")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model, phenotypes, methods = "RR-BLUP",single_step_analysis=1,
pedigree=pedigree, chain_length = 5000, output_samples_frequency = 100,outputEBV=TRUE)
out = JWASr::runMCMC(model, phenotypes, methods = "RR-BLUP",single_step_analysis=TRUE,
pedigree=pedigree, chain_length = 5000, output_samples_frequency = 100,outputEBV=TRUE)
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1);")
JWASr::assign("G1", 1.0)
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(2))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"
JWASr::add_genotypes(geno_path, G3)  #separator=',' is default
JWASr::assign("a1","a1")
JWASr::assign("a2","a2")
JWASr::assign("a3","a3")
JWASr::ran_julia("outputEBV(model,[a1,a2,a3]);")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model, phenotypes, methods = "RR-BLUP",single_step_analysis=TRUE,
pedigree=pedigree, chain_length = 5000, output_samples_frequency = 100,outputEBV=TRUE)
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1);")
JWASr::assign("G1", 1.0)
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(2))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"
JWASr::add_genotypes(geno_path, G3)  #separator=',' is default
JWASr::assign("a1","a1")
JWASr::assign("a2","a2")
JWASr::assign("a3","a3")
JWASr::ran_julia("outputEBV(model,[a1,a2,a3]);")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model, phenotypes, methods = "RR-BLUP",single_step_analysis=TRUE,
pedigree=pedigree, chain_length = 5000, output_samples_frequency = 100,outputEBV=TRUE)
#update package
devtools::document()
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1);")
JWASr::assign("G1", 1.0)
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(2))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"
JWASr::add_genotypes(geno_path, G3)  #separator=',' is default
JWASr::assign("a1","a1")
JWASr::assign("a2","a2")
JWASr::assign("a3","a3")
JWASr::ran_julia("outputEBV(model,[a1,a2,a3]);")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model, phenotypes, methods = "RR-BLUP",single_step_analysis=TRUE,
pedigree=pedigree, chain_length = 5000, output_samples_frequency = 100,outputEBV=TRUE)
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1);")
JWASr::assign("G1", 1.0)
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(2))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"
JWASr::add_genotypes(geno_path, G3)  #separator=',' is default
JWASr::assign("a1","a1")
JWASr::assign("a2","a2")
JWASr::assign("a3","a3")
JWASr::ran_julia("outputEBV(model,[a1,a2,a3]);")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model, phenotypes, methods = "RR-BLUP",single_step_analysis=TRUE,
pedigree=pedigree, chain_length = 5000, output_samples_frequency = 100,outputEBV=TRUE)
out = JWASr::runMCMC(phenotypes, methods = "RR-BLUP",pedigree=pedigree)
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1);")
R = 1.0
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1);")
JWASr::assign("G1", 1.0)
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(2))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"
JWASr::add_genotypes(geno_path, G3)  #separator=',' is default
JWASr::assign("a1","a1")
JWASr::assign("a2","a2")
JWASr::assign("a3","a3")
JWASr::ran_julia("outputEBV(model,[a1,a2,a3]);")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(phenotypes, methods = "RR-BLUP",pedigree=pedigree)
out
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
function (object, contr, how.many, ...)
{
if (!nlevels(object))
stop("object not interpretable as a factor")
if (!missing(contr) && is.name(Xcontr <- substitute(contr)))
contr <- switch(as.character(Xcontr), poly = "contr.poly",
helmert = "contr.helmert", sum = "contr.sum", treatment = "contr.treatment",
SAS = "contr.SAS", contr)
if (missing(contr)) {
oc <- getOption("contrasts")
contr <- if (length(oc) < 2L)
if (is.ordered(object))
contr.poly
else contr.treatment
else oc[1 + is.ordered(object)]
}
if (missing(how.many) && missing(...))
contrasts(object) <- contr
else {
if (is.character(contr))
contr <- get(contr, mode = "function")
if (is.function(contr))
contr <- contr(nlevels(object), ...)
contrasts(object, how.many) <- contr
}
object
}
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1);")
JWASr::assign("G1", 1.0)
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(2))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"
JWASr::add_genotypes(geno_path, G3)  #separator=',' is default
JWASr::assign("a1","a1")
JWASr::assign("a2","a2")
JWASr::assign("a3","a3")
JWASr::ran_julia("outputEBV(model,[a1,a2,a3]);")
JWASr::ran_julia("outputMCMCsamples(model,x2)")
out = JWASr::runMCMC(model, phenotypes, methods = "RR-BLUP",single_step_analysis=TRUE,
pedigree=pedigree, chain_length = 5000, output_samples_frequency = 100,outputEBV=true)
out = JWASr::runMCMC(model, phenotypes, methods = "RR-BLUP",single_step_analysis=TRUE,
pedigree=pedigree, chain_length = 5000, output_samples_frequency = 100,outputEBV=TRUE)
out
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation = "y1 = intercept + x1*x3 + x2 + x3 + ID + dam";
R = 1.0
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::assign("x1","x1")
JWASr::ran_julia("set_covariate(model,x1);")
JWASr::assign("G1", 1.0)
JWASr::assign("x2","x2")
JWASr::ran_julia("set_random(model,x2,G1)")
JWASr::assign("G2",diag(2))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia("set_random(model,ID_dam,pedigree,G2)")
G3 = 1.0
geno_path = "D:/JWASr/data/genotypes.txt"
JWASr::add_genotypes(geno_path, G3)  #separator=',' is default
JWASr::ran_julia('outputEBV(model,["a1","a2","a3"]);')
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("zhaotianjing/JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation ="y1 = intercept + x1 + x3 + ID + dam
y2 = intercept + x1 + x2 + x3 + ID
y3 = intercept + x1 + x1*x3 + x2 + ID"
R = diag(3)
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::ran_julia('set_covariate(model,"x1")')
JWASr::assign("G1", diag(2))
JWASr::ran_julia('set_random(model, "x2", G1)')
JWASr::assign("G2",diag(4))
JWASr::ran_julia('set_random(model, "ID dam", pedigree, "G2")')
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("zhaotianjing/JWASr")
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation ="y1 = intercept + x1 + x3 + ID + dam
y2 = intercept + x1 + x2 + x3 + ID
y3 = intercept + x1 + x1*x3 + x2 + ID"
R = diag(3)
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::ran_julia('set_covariate(model,"x1")')
JWASr::assign("G1", diag(2))
JWASr::ran_julia('set_random(model, "x2", G1)')
JWASr::assign("G2",diag(4))
JWASr::ran_julia('set_random(model, "ID dam", pedigree, "G2")')
JWASr::assign("G2",diag(4))
JWASr::ran_julia('set_random(model,"ID dam",pedigree,"G2")')
#update package
devtools::document()
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
#update package
devtools::document()
setwd("D:/JWASr")
devtools::load_all()
path_libjulia = "C:/Users/ztjsw/AppData/Local/Julia-0.7.0/bin/libjulia.dll"
JWASr::jwasr_setup_win(path_libjulia)
phenotypes = JWASr::phenotypes
ped_path = "D:\\JWASr\\data\\pedigree.txt"
JWASr::get_pedigree(ped_path, separator=',', header=T)  #build "pedigree" in Julia
model_equation ="y1 = intercept + x1 + x3 + ID + dam
y2 = intercept + x1 + x2 + x3 + ID
y3 = intercept + x1 + x1*x3 + x2 + ID"
R = diag(3)
model = JWASr::build_model(model_equation,R) #build "model" in Julia
JWASr::ran_julia('set_covariate(model,"x1")')
JWASr::assign("G1", diag(2))
JWASr::ran_julia('set_random(model, "x2", G1)')
JWASr::assign("G2",diag(4))
JWASr::assign("ID_dam","ID dam")
JWASr::ran_julia('set_random(model,ID_dam,pedigree,"G2")')
JWASr::assign("G2",diag(4))
JWASr::ran_julia('set_random(model,"ID dam",pedigree,G2)')
G3 = diag(3)
geno_path = "D:/JWASr/data/genotypes.txt"
JWASr::add_genotypes(geno_path, G3)  #separator=',' is default
out = JWASr::runMCMC(data = phenotypes, methods = "BayesC", estimatePi = TRUE, single_step_analysis = TRUE,
pedigree = TRUE, chain_length = 5000, output_samples_frequency = 100)  #pedigree=TRUE: pedigree; FALSE: false
out$`Posterior mean of marker effects`
out
#update package
devtools::document()
